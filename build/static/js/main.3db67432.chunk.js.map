{"version":3,"sources":["tempos.ts","Converter.tsx","TapTempo.tsx","TemposCollections.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["convertFunction","bpm","time","formula","NormalTempo","name","multiply","Converter","onBpmChange","bpmChange","useCallback","e","num","target","value","className","onSubmit","preventDefault","id","type","onChange","placeholder","min","max","toFixed","colorsArray","TapTempo","useState","color","setColor","bpmCalc","setBpmCalc","stars","setStars","beats","setBeats","style","background","initTapper","addBeat","newBeat","ts","Date","count","match","length","t1","getTime","t2","t3","Math","abs","onMouseDown","round","TemposCollections","multiplier","signature","measure","insertMeasures","g","borderRadius","borderColor","borderStyle","borderWidth","paddingRight","style2","style3","map","i","intstyle","toString","App","setBpm","updateBpm","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3db67432.chunk.js","sourcesContent":["\r\nexport const convertFunction = (bpm : number, time? : number) => {\r\n    let result\r\n    if (bpm > 0) {\r\n        const formula = 60000 / bpm;\r\n\r\n        if (time) {\r\n            result = (formula * time);\r\n        }\r\n\r\n        else result = formula;\r\n\r\n        return result;\r\n    }\r\n    else return 0;\r\n\r\n}\r\n\r\nexport const dotMultiplier = (3/2);\r\nexport const tripletMultiplier = (2/3);\r\n\r\nexport const NormalTempo = [\r\n    {\r\n        name : \"32\",\r\n        multiply: 32,\r\n    },\r\n    {\r\n        name : \"16\",\r\n        multiply: 16,\r\n    },\r\n    {\r\n        name : \"8\",\r\n        multiply: 8,\r\n    },\r\n    {\r\n        name : \"4\",\r\n        multiply: 4,\r\n    },\r\n    {\r\n        name : \"2\",\r\n        multiply: 2,\r\n    },\r\n    {\r\n        name : \"1\",\r\n        multiply: 1,\r\n    },\r\n    {\r\n        name : \"1/2\",\r\n        multiply: (1/2),\r\n    },\r\n    {\r\n        name : \"1/4\",\r\n        multiply: (1/4),\r\n    },\r\n    {\r\n        name : \"1/8\",\r\n        multiply: (1/8),\r\n    },\r\n    {\r\n        name : \"1/16\",\r\n        multiply: (1/16),\r\n    },\r\n    {\r\n        name : \"1/32\",\r\n        multiply: (1/32),\r\n    },\r\n    {\r\n        name : \"1/64\",\r\n        multiply: (1/64),\r\n    },\r\n    {\r\n        name : \"1/128\",\r\n        multiply: (1/128),\r\n    },\r\n    {\r\n        name : \"1/256\",\r\n        multiply: (1/256),\r\n    }\r\n];\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport './App.css';\r\nimport {convertFunction} from \"./tempos\"\r\n\r\n\r\ninterface ConverterProps {\r\n    onBpmChange : (num : number) => void;\r\n    bpm : number;\r\n}\r\n\r\n\r\nconst Converter : React.FC<ConverterProps> = ({onBpmChange,bpm}) => {\r\n\r\n    let bpmChange = useCallback((e : ChangeEvent<HTMLInputElement>) => {\r\n        let str = e.target.value\r\n        let num: number = +str;\r\n        if (num > 1000) {\r\n            num = 1000;\r\n            onBpmChange(num);\r\n        }\r\n        if (num < 0 ) onBpmChange(0);\r\n        else onBpmChange(num);\r\n    },[]);\r\n\r\n\r\n    return (\r\n         <div className=\"Converter-wrapper\">\r\n             <form className=\"Converter-form\" onSubmit={(e)=> e.preventDefault()}>\r\n                 <div className=\"My-input\" id=\"bpms\">\r\n                     <h4 id=\"bpms-insert\">INSERT BPM</h4>\r\n                 </div>\r\n                     <input className=\"My-input\" id=\"bpm-input\" type=\"number\"  onChange={ bpmChange } placeholder=\"BPM\" min={0} max={10000}/>\r\n\r\n\r\n                <div className=\"My-input\" id=\"conversion-result\">\r\n                     <h4>{convertFunction(bpm).toFixed(1)}</h4>\r\n                     <h4>ms</h4>\r\n                 </div>\r\n\r\n                 <div className=\"My-input\" id=\"conversion-result-seconds\">\r\n                     <h4>{convertFunction(bpm*1000).toFixed(2)}</h4>\r\n                     <h4>s</h4>\r\n                 </div>\r\n\r\n             </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Converter;\r\n","import React, { useCallback, useState} from 'react';\r\n\r\nconst colorsArray = [\"#63277CBF\", \"#db6169\",\"#6576bd\",\"#495e2a\"];\r\n\r\n\r\ninterface Beat {\r\n    ts: Date\r\n}\r\n\r\ninterface TapTempoProps{\r\n    onBpmChange : (num : number) => void;\r\n}\r\n\r\n\r\nconst TapTempo : React.FC<TapTempoProps> = ({onBpmChange}) => {\r\n    const [color,setColor] = useState<string>(\"#63277CBF\");\r\n    const [bpmCalc, setBpmCalc] = useState<number>(0)\r\n    const [stars, setStars] = useState<string>(\"\")\r\n    const [beats, setBeats] = useState<Beat[]>([])\r\n\r\n    const style = {\r\n        background: color,\r\n    }\r\n\r\n    let initTapper = useCallback(() => {\r\n        setColor(colorsArray[0]);\r\n        setBpmCalc(0)\r\n        setStars(\"\")\r\n        setBeats([])\r\n    },[])\r\n\r\n\r\n    const addBeat = useCallback(() => {\r\n        const newBeat: Beat = {\r\n            ts: new Date()\r\n        }\r\n        const count = (stars.match(/ðŸ‘½/g) || []).length;\r\n        setColor(colorsArray[count % 4]);\r\n        if (beats.length === 3){\r\n            const t1: number = beats[1].ts.getTime() - beats[0].ts.getTime();\r\n            const t2: number = beats[2].ts.getTime() - beats[1].ts.getTime();\r\n            const t3: number = newBeat.ts.getTime() - beats[2].ts.getTime();\r\n            const avg = Math.abs((t1 + t2 + t3) / 3);\r\n            const bpm = 60000 / avg;\r\n            setBeats([]);\r\n            if(count === 15) {\r\n                setStars(`${stars} ðŸ‘½`);\r\n            } else {\r\n                setStars(`${stars} ðŸ‘½    -`);\r\n            }\r\n            setBpmCalc(bpm);\r\n            onBpmChange(bpm);\r\n        } else {\r\n            setBeats([...beats, newBeat]);\r\n            if(count < 15) {\r\n                setStars(`${stars} ðŸ‘½`);\r\n            } else {\r\n                setStars(\"ðŸ‘½\");\r\n            }\r\n        }\r\n\r\n    }, [beats]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"TapTempo-wrapper\" onMouseDown={addBeat} style={style}>\r\n                <h2>TAP TEMPO</h2>\r\n                <h2>{Math.round(bpmCalc)}</h2>\r\n                <h2>{stars}</h2>\r\n            </div>\r\n\r\n            <div className=\"Buttons-wrapper\">\r\n                <button onMouseDown={initTapper} className=\"My-button\" id=\"resetbutton\">\r\n                    <h3>RESET</h3>\r\n                </button>\r\n            </div>\r\n        </>\r\n);\r\n}\r\n\r\nexport default TapTempo;\r\n","import React from \"react\";\r\nimport {convertFunction, NormalTempo} from \"./tempos\";\r\n\r\ninterface TemposCollectionsProps {\r\n    bpm : number;\r\n    multiplier : number;\r\n}\r\n\r\nexport const TemposCollections : React.FC<TemposCollectionsProps> =  ({bpm, multiplier}) => {\r\n\r\n    let signature =  (multiplier > 1)  ? \".\" : (multiplier === 1) ? \"\" : \"t\";\r\n    let measure = \"\";\r\n\r\n\r\n    let insertMeasures  = (multiply : number) => {\r\n        let g = (((convertFunction(bpm, multiply))) * multiplier);\r\n        if (g > 1000) {\r\n            measure = \" s\";\r\n            return (g / 1000).toFixed(1);\r\n        }\r\n        else {\r\n            measure = \" ms\";\r\n            return g.toFixed(1);\r\n        }\r\n    }\r\n\r\n    const style = {\r\n        background: \"#63277cbf\",\r\n        borderRadius : \"9%\",\r\n        borderColor : \"#ddfcff36\",\r\n        borderStyle: \"groove\",\r\n        borderWidth: \"thin\",\r\n        paddingRight : \"0.5%\"\r\n    }\r\n\r\n    const style2 = {\r\n        background: \"#2e855385\",\r\n        borderRadius : \"9%\",\r\n        borderColor : \"#ddfcff36\",\r\n        borderStyle: \"groove\",\r\n        borderWidth: \"thin\",\r\n        paddingRight : \"0.5%\"\r\n    }\r\n\r\n    const style3 = {\r\n        background: \"#194a2a66\",\r\n        borderRadius : \"9%\",\r\n        borderColor : \"#ddfcff36\",\r\n        borderStyle: \"groove\",\r\n        borderWidth: \"thin\",\r\n        paddingRight : \"0.5%\"\r\n\r\n    }\r\n\r\n    let insertElements = () =>\r\n        NormalTempo.map(({name, multiply},i) => {\r\n            let intstyle ;\r\n            intstyle = (multiply === 1) ?  style : (i%2 === 0) ? style2 : style3;\r\n\r\n            return (\r\n                <li className=\"TempoValues-containers\" key={name + multiplier.toString()} style={intstyle}>\r\n\r\n                    <span className=\"Tempos\"\r\n                          key={name}\r\n                          id={name + multiplier.toString()}\r\n                    >\r\n                        <h3>\r\n                            {name + signature}\r\n                        </h3>\r\n                    </span>\r\n\r\n                    <span className=\"TemposValue\"\r\n                          key={name + multiplier}\r\n                          id={multiplier.toString() + \"-multiplier\"}\r\n                    >\r\n                        <p>\r\n                            {insertMeasures(multiply)}\r\n                        </p>\r\n                        <p>\r\n                            {measure}\r\n                        </p>\r\n                    </span>\r\n                </li>)\r\n        })\r\n\r\n    return (\r\n        <ul className=\"TemposList-wrapper\">\r\n            <li className=\"TempoValues-containers\" style={style}>\r\n                <span> BAR </span>\r\n            </li>\r\n            { insertElements() }\r\n        </ul>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Converter from \"./Converter\";\nimport TapTempo from \"./TapTempo\";\nimport {TemposCollections} from \"./TemposCollections\";\nimport {dotMultiplier, tripletMultiplier} from \"./tempos\";\n\n\nconst App : React.FC = () => {\n    const [bpm,setBpm] = useState<number>(0);\n\n\n    let updateBpm = (bpm : number) => {\n        setBpm(bpm)\n    }\n\n    return (\n        <div className=\"App-wrapper\">\n            <header className=\"App-header\">\n                <h1>BPM TO TEMPO CONVERTER</h1>\n            </header>\n            <TapTempo onBpmChange={updateBpm}/>\n            <Converter onBpmChange={updateBpm} bpm={bpm}  />\n            <div className=\"TempoShowing-wrapper\" >\n\n                <div className=\"TemposMetrics\" id={\"normal-multi\"}>\n                    <h2> NORMAL </h2>\n                    <TemposCollections bpm={bpm} multiplier={1}/>\n                </div>\n                <div className=\"TemposMetrics\">\n                    <h2> DOTTED </h2>\n                    <TemposCollections bpm={bpm} multiplier={dotMultiplier}/>\n                </div>\n                <div className=\"TemposMetrics\">\n                    <h2> TRIPLETS </h2>\n                    <TemposCollections bpm={bpm} multiplier={tripletMultiplier}/>\n                </div>\n            </div>\n            <footer className=\"My-footer\" >\n                <a href=\"mailto:mauro.ciccullo@hotmail.com\"> Contact webmaster </a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}